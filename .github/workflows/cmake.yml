name: CMake

on:
  push:
    branches: [ main ]
    paths:
      - '.github/**'
      - 'src/**'
      - 'leviosam-test.py'
      - 'CMakeLists.txt'
      - 'CMakeLists.txt.in'
      - 'testdata/**'
  pull_request:
    branches:
      - 'master'
    paths:
      - '.github/**'
      - 'src/**'
      - 'leviosam-test.py'
      - 'CMakeLists.txt'
      - 'CMakeLists.txt.in'
      - 'testdata/**'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Cache htslib
      id: cache-htslib
      uses: actions/cache@v3
      with:
        path: |
          /usr/local/lib/libhts.so.1.13
          /usr/local/lib/libhts.so
          /usr/local/lib/libhts.so.3
          /usr/local/lib/pkgconfig/htslib.pc
          /usr/local/bin/bgzip
          /usr/local/bin/htsfile
          /usr/local/bin/tabix
          /usr/local/include/htslib
          /usr/local/lib/libhts.a
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Cache SDSL
      id: cache-sdsl
      uses: actions/cache@v3
      with:
        path: |
          /usr/include/sdsl
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
        
    - name: Set up SDSL
      if: steps.cache-sdsl.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libsdsl-dev
    
    - name: Set up htslib
      if: steps.cache-htslib.outputs.cache-hit != 'true'
      run: wget https://github.com/samtools/htslib/releases/download/1.13/htslib-1.13.tar.bz2 && tar -vxjf htslib-1.13.tar.bz2 && cd htslib-1.13 && ./configure && make && sudo make install && cd ../ && rm htslib-1.13.tar.bz2
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
